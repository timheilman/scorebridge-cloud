schema {
  query: Query
  mutation: Mutation
}

type Query {
  exampleLambdaDataSource(
    input: ExampleLambdaDataSourceInput
  ): ExampleLambdaDataSourceOutput!
}

input ExampleLambdaDataSourceInput {
  extension: String!
  contentType: String
}

type ExampleLambdaDataSourceOutput {
  exampleOutputField: String!
}

type Mutation {
  addClub(input: AddClubInput!): AddClubResponse! @aws_api_key

  removeClubAndAdmin(
    input: RemoveClubAndAdminInput!
  ): RemoveClubAndAdminResponse!
    @aws_auth(cognito_groups: ["adminClub", "adminSuper"])
}

input AddClubInput {
  newAdminEmail: AWSEmail!
  newClubName: String!
  suppressInvitationEmail: Boolean
}
type AddClubResponseData {
  userId: String! @aws_api_key
  clubId: String! @aws_api_key
}
type AddClubResponseError {
  message: String!
}
type AddClubResponse {
  data: AddClubResponseData
  errors: [AddClubResponseError]
}

input RemoveClubAndAdminInput {
  userId: String!
  clubId: String!
}

type RemoveClubAndAdminResponse {
  status: String!
}

# How to do paginated lists:
#type ProfilesPage {
#  profiles: [IProfile!]
#  nextToken: String
#}
