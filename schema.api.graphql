schema {
  query: Query
  mutation: Mutation
}

# ignore for now; Query simply has to be present
type Query {
  club(clubId: String!): Club
  @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])

  tabletsForClub(clubId: String!): [Tablet]!
  @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])

  exampleLambdaDataSource(
    input: ExampleLambdaDataSourceInput!
  ): ExampleLambdaDataSourceOutput!
  @aws_cognito_user_pools(cognito_groups: [])
}

type Club {
  id: String
  name: String
  createdAt: AWSDateTime
}

type Tablet {
  id: String
  name: String
  createdAt: AWSDateTime
}

type TabletsForClubOutput {
  tablets: [Club]!
}

input ExampleLambdaDataSourceInput {
  extension: String!
  contentType: String
}

type ExampleLambdaDataSourceOutput {
  exampleOutputField: String!
}

type Mutation {
  unexpectedError: UnexpectedErrorResponse!
  @aws_cognito_user_pools(cognito_groups: ["adminSuper"])

  addClub(input: AddClubInput!): AddClubResponse!
  @aws_api_key
  @aws_cognito_user_pools(cognito_groups: ["adminSuper"])

  removeClubAndAdmin(input: RemoveClubAndAdminInput!): RemoveClubAndAdminResponse!
  @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])

  addTabletNonce(input: AddTabletNonceInput!): AddTabletNonceResponse!
  @aws_cognito_user_pools(cognito_groups: ["adminSuper"])

  addTablet(input: AddTabletInput!): AddTabletResponse!
  @aws_api_key
  @aws_cognito_user_pools(cognito_groups: ["adminSuper"])
}

input AddTabletNonceInput {
  clubId: String!
  tabletName: String!
  nonce: String!
}

type AddTabletNonceResponse {
  status: String!
}

input AddTabletInput {
  clubId: String!
  nonce: String!
}

type AddTabletResponse {
  username: AWSEmail!
  password: String!
}

type UnexpectedErrorResponse {
  neverGetsReturned: String! @aws_cognito_user_pools(cognito_groups: ["adminSuper"])
}

input AddClubInput {
  newAdminEmail: AWSEmail!
  newClubName: String!
  suppressInvitationEmail: Boolean
  recaptchaToken: String
}

type AddClubResponse {
  userId: String! @aws_api_key @aws_cognito_user_pools(cognito_groups: ["adminSuper"])
  clubId: String! @aws_api_key @aws_cognito_user_pools(cognito_groups: ["adminSuper"])
}

input RemoveClubAndAdminInput {
  userId: String!
  clubId: String!
}

type RemoveClubAndAdminResponse {
  status: String!
}

# How to do paginated lists:
#type ProfilesPage {
#  profiles: [IProfile!]
#  nextToken: String
#}
