schema {
  query: Query
  mutation: Mutation
}

# ignore for now; Query simply has to be present
type Query {
  getClub(clubId: String!): Club!
    @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])

  listClubDevices(input: ListClubDevicesInput!): ListClubDevicesOutput!
    @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])
}

input ListClubDevicesInput {
  clubId: String!
  nextToken: String
  limit: Int = 50
}

type ListClubDevicesOutput {
  clubDevices: [ClubDevice]!
  nextToken: String
}

type Club {
  id: String!
  name: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type ClubDevice {
  clubId: String!
  clubDeviceId: String!
  name: String!
  email: AWSEmail!
  table: Int
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Mutation {
  unexpectedError: UnexpectedErrorResponse!
    @aws_cognito_user_pools(cognito_groups: ["adminSuper"])

  createClub(input: CreateClubInput!): CreateClubResponse!
    @aws_api_key
    @aws_cognito_user_pools(cognito_groups: ["adminSuper"])

  deleteClubAndAdmin(
    input: DeleteClubAndAdminInput!
  ): DeleteClubAndAdminResponse!
    @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])

  createClubDevice(input: CreateClubDeviceInput!): CreateClubDeviceResponse!
    @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])

  deleteClubDevice(input: DeleteClubDeviceInput!): DeleteClubDeviceResponse!
    @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])
}

input CreateClubDeviceInput {
  clubId: String!
  deviceName: String!
  regToken: String!
}

type CreateClubDeviceResponse {
  clubDeviceId: String!
  clubDeviceEmail: AWSEmail!
}

input DeleteClubDeviceInput {
  clubId: String!
  clubDeviceId: String!
}

type DeleteClubDeviceResponse {
  status: String!
}

type UnexpectedErrorResponse {
  neverGetsReturned: String!
    @aws_cognito_user_pools(cognito_groups: ["adminSuper"])
}

input CreateClubInput {
  newAdminEmail: AWSEmail!
  newClubName: String!
  suppressInvitationEmail: Boolean
  recaptchaToken: String!
}

type CreateClubResponse {
  userId: String!
    @aws_api_key
    @aws_cognito_user_pools(cognito_groups: ["adminSuper"])
  clubId: String!
    @aws_api_key
    @aws_cognito_user_pools(cognito_groups: ["adminSuper"])
}

input DeleteClubAndAdminInput {
  userId: String!
  clubId: String!
}

type DeleteClubAndAdminResponse {
  status: String!
}

# How to do paginated lists:
#type ProfilesPage {
#  profiles: [IProfile!]
#  nextToken: String
#}
